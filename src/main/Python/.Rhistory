getSymbols("AMZN")
getSymbols("Z")
getSymbols("GOOG")
getSymbols("LNKD")
symbols <- c("LNKD","GOOG","Z","AMZN","ZNGA")
N <- 185
symb_mat <- cbind(Z[1:N,4],AMZN[1:N,4],ZNGA[1:N,4],GOOG[1:N,4],LNKD[1:N,4])
symb_mat
Z[1:N,4]
update.packages(ask='graphics',checkBuilt=TRUE)
LNKD
Z
Z[,4]
symb_mat
AMZN[,4]
N
Z[1:N,4]
AMZN[1:N,4]
AMZN[1:N,4]
AMZN[,4]
SYMBOLS
symbols
library(quantmod)
getSymbols("ZNGA")
getSymbols("AMZN")
getSymbols("Z")
getSymbols("GOOG")
getSymbols("LNKD")
symbols <- c("LNKD","GOOG","Z","AMZN","ZNGA")
ZNGA <- ZNGA["2012"]
AMZN <- AMZN["2012"]
Z <- Z["2012"]
GOOG <- GOOG["2012"]
LNKD <- LNKD["2012"]
N <- 185
symb_mat <- cbind(Z[1:N,4],AMZN[1:N,4],ZNGA[1:N,4],GOOG[1:N,4],LNKD[1:N,4])
Z
Z[,4]
Z[1:N,4]
as.vector(Z[1:N,4])
symb_mat
library(quantmod)
getSymbols("ZNGA")
getSymbols("AMZN")
getSymbols("Z")
getSymbols("GOOG")
getSymbols("LNKD")
symbols <- c("LNKD","GOOG","Z","AMZN","ZNGA")
ZNGA <- ZNGA["2012"]
AMZN <- AMZN["2012"]
Z <- Z["2012"]
GOOG <- GOOG["2012"]
LNKD <- LNKD["2012"]
N <- 185
symb_mat <- cbind(as.vector(Z[1:N,4]),
as.vector(AMZN[1:N,4]),
as.vector(ZNGA[1:N,4]),
as.vector(GOOG[1:N,4]),
as.vector(LNKD[1:N,4]))
symb_mat
symb_mat
symb_mat[-1,]
symb_mat
symb_mat[-1,]
symb_mat[-1,]/symb_mat[-n,]
symb_mat[-1,]/symb_mat[-N,]
symb_mat[1,]
symb_mat[2,]
symb_mat[1,]/symb_mat[2,]
symb_mat[-1,]/symb_mat[-N,]
symb_mat[2,]/symb_mat[1,]
symb_mat[-1,]/symb_mat[-N,]
library(quantmod)
getSymbols("ZNGA")
getSymbols("AMZN")
getSymbols("Z")
getSymbols("GOOG")
getSymbols("LNKD")
symbols <- c("LNKD","GOOG","Z","AMZN","ZNGA")
ZNGA <- ZNGA["2012"]
AMZN <- AMZN["2012"]
Z <- Z["2012"]
GOOG <- GOOG["2012"]
LNKD <- LNKD["2012"]
N <- 185
symb_mat <- cbind(as.vector(Z[1:N,4]),
as.vector(AMZN[1:N,4]),
as.vector(ZNGA[1:N,4]),
as.vector(GOOG[1:N,4]),
as.vector(LNKD[1:N,4]))
returns <- log(symb_mat[-1,]/symb_mat[-N,])
returns
library(quantmod)
getSymbols("ZNGA")
getSymbols("AMZN")
getSymbols("Z")
getSymbols("GOOG")
getSymbols("LNKD")
getSymbols("^GSPC")
symbols <- c("LNKD","GOOG","Z","AMZN","ZNGA")
ZNGA <- ZNGA["2012"]
AMZN <- AMZN["2012"]
Z <- Z["2012"]
GOOG <- GOOG["2012"]
LNKD <- LNKD["2012"]
GSPC <- GSPC["2012"]
N <- 185
symb_mat <- cbind(as.vector(Z[1:N,4]),
as.vector(AMZN[1:N,4]),
as.vector(ZNGA[1:N,4]),
as.vector(GOOG[1:N,4]),
as.vector(LNKD[1:N,4]))
C.GSPC <- as.vector(GSPC[1:N, 4])
R.SP500 <- log(C.GSPC[-1] / C.GSPC[-N])
returns <- log(symb_mat[-1,]/symb_mat[-N,])
plot(LNKD)
plot(Z)
plot(ZNGA)
var(returns)
fit1 <- lm(symb_mat[,1] ~ R.SP500)
length(R.SP500)
length(symb_mat[,1])
fit1 <- lm(returns[,1] ~ R.SP500)
returns
m1 <- lm(returns ~ R.SP500)
m1
coef(m1)
coef(m1)[2, , drop = FALSE]
t(coef(m1)[2, , drop = FALSE])
m1.sum
library(quantmod)
getSymbols("ZNGA")
getSymbols("AMZN")
getSymbols("Z")
getSymbols("GOOG")
getSymbols("LNKD")
getSymbols("^GSPC")
symbols <- c("LNKD","GOOG","Z","AMZN","ZNGA")
ZNGA <- ZNGA["2012"]
AMZN <- AMZN["2012"]
Z <- Z["2012"]
GOOG <- GOOG["2012"]
LNKD <- LNKD["2012"]
GSPC <- GSPC["2012"]
N <- 185
symb_mat <- cbind(as.vector(Z[1:N,4]),
as.vector(AMZN[1:N,4]),
as.vector(ZNGA[1:N,4]),
as.vector(GOOG[1:N,4]),
as.vector(LNKD[1:N,4]))
C.GSPC <- as.vector(GSPC[1:N, 4])
R.SP500 <- log(C.GSPC[-1] / C.GSPC[-N])
returns <- log(symb_mat[-1,]/symb_mat[-N,])
m1 <- lm(returns ~ R.SP500)
m1.sum <- summary(m1)
b <- t(coef(m1)[2, , drop = FALSE])
d <- sapply(m1.sum, function(u) u$sigma)
D <- diag(d^2)
sigma2M <- var(R.SP500)
omega <- sigma2m * b %*% t(b) + D
var(returns)
omega <- sigma2M * b %*% t(b) + D
omega
1000*omega
1000*var(returns)
m1
b
b %*% t(b)
sigma2M
var(R.SP500)
D
d^2
omega
var(returns)
1000*var(returns)
1000*omega
1000*omega-1000*var(returns)
b
m1
m1
m1.sum
m1.sum$sigma
?sapply
m1.sum
d
m1.sum
m1.sum$sigma
m1.sum(1)
m1.sum[1]
m1.sum[1]$sigma
m1.sum[2]$sigma
m1.sum[2]
m1.sum[2]$simga
m1.sum[2]$sigma
sapply(m1.sum,function(u) u$sigma)
var(returns)
omega
1000*omega
1000*var(returns)
sqrt(var(returns))
1000*sqrt(var(returns))
cov
cov(returns)
1000*cov(returns)
1000*omega
cov(returns)
b%*%cov(returns)
b
t(b)%*%cov(returns)
t(b)*cov(returns)
(b)*cov(returns)
cov(returns)
set.seed(1)
#####################################################################################################
if(file.exists("Images/Citi.pdf"))
unlink("Images/Citi.pdf")
pdf("Images/Citi.pdf", height = 2.5, width = 4)
library(quantmod)
getSymbols("C")
getSymbols("^GSPC")
C <- C["2012"]
GSPC <- GSPC["2012"]
n <- 185
C.C <- as.vector(C[1:n, 4])
C.GSPC <- as.vector(GSPC[1:n, 4])
R.C <- log(C.C[-1] / C.C[-n])
R.SP500 <- log(C.GSPC[-1] / C.GSPC[-n])
par(mar = c(4, 4, 0.5, 0.5))
plot(R.SP500, R.C, pch = 16, xlab = "S&P 500 Daily Returns", ylab = "Citigroup Daily Returns",
col = "blue")
dev.off()
#####################################################################################################
if(file.exists("Images/stdres.pdf"))
unlink("Images/stdres.pdf")
pdf("Images/stdres.pdf", height = 2.5, width = 4)
m.citi <- lm(R.C ~ R.SP500)
par(mar = c(4, 4, 0.5, 0.5))
plot(R.SP500, rstandard(m.citi), pch = 16, col = "blue", xlab = "S&P 500 Daily Returns",
ylab = "Standardized Residuals")
abline(h = 0, col = "gray")
dev.off()
#####################################################################################################
if(file.exists("Images/notlinear.pdf"))
unlink("Images/notlinear.pdf")
pdf("Images/notlinear.pdf", height = 2.5, width = 4)
x <- sort(runif(100, -4, 4))
y <- 0.5*x + 2*sin(x) + rnorm(100)
par(mar = c(4, 4, 0.5, 0.5))
plot(x, y, pch = 16, col = "blue", xlab = expression(x),
ylab = "Y", )
dev.off()
#####################################################################################################
if(file.exists("Images/notlinearres.pdf"))
unlink("Images/notlinearres.pdf")
pdf("Images/notlinearres.pdf", height = 2.5, width = 4)
m7 <- lm(y ~ x)
par(mar = c(4, 4, 0.5, 0.5))
plot(x, rstandard(m7), pch = 16, col = "blue", xlab = expression(x),
ylab = "Standardized Residuals", )
abline(h = 0, col = "gray")
dev.off()
#####################################################################################################
if(file.exists("Images/notlinearres2.pdf"))
unlink("Images/notlinearres2.pdf")
pdf("Images/notlinearres2.pdf", height = 2.5, width = 4)
m3 <- lm(y ~ x + sin(x))
par(mar = c(4, 4, 0.5, 0.5))
plot(x, rstandard(m3), pch = 16, col = "blue", xlab = expression(x),
ylab = "Standardized Residuals", )
abline(h = 0, col = "gray")
dev.off()
#####################################################################################################
if(file.exists("Images/leftout.pdf"))
unlink("Images/leftout.pdf")
pdf("Images/leftout.pdf", height = 2.5, width = 4)
x1 <- runif(200, -4, 4)
x2 <- runif(200, -4, 4)
y <- x1 + x2 + 3*rnorm(200)
m1 <- lm(y ~ x1)
par(mar = c(4, 4, 0.5, 0.5))
plot(x2, rstandard(m1), pch = 16, col = "blue", xlab = expression(x[2]),
ylab = "Standardized Residuals")
abline(h = 0, col = "gray")
dev.off()
#####################################################################################################
if(file.exists("Images/homoOK.pdf"))
unlink("Images/homoOK.pdf")
pdf("Images/homoOK.pdf", height = 2.5, width = 4)
par(mar = c(4, 4, 0.5, 0.5))
plot(fitted(m.citi), rstandard(m.citi), pch = 16, col = "blue", xlab = "Fitted Values",
ylab = "Standardized Residuals")
abline(h = 0, col = "gray")
dev.off()
#####################################################################################################
if(file.exists("Images/homoNotOK.pdf"))
unlink("Images/homoNotOK.pdf")
pdf("Images/homoNotOK.pdf", height = 2.5, width = 4)
x <- runif(100, 0, 4)
y <- 1 + 2*x + rnorm(100, sd = x)
par(mar = c(4, 4, 0.5, 0.5))
plot(x, y, pch = 16, col = "blue", xlab = expression(x), ylab = "Response")
dev.off()
#####################################################################################################
if(file.exists("Images/homoNotOKres.pdf"))
unlink("Images/homoNotOKres.pdf")
pdf("Images/homoNotOKres.pdf", height = 2.5, width = 4)
x <- runif(100, 0, 4)
y <- 1 + 2*x + rnorm(100, sd = x)
m2 <- lm(y ~ x)
par(mar = c(4, 4, 0.5, 0.5))
plot(fitted(m2), rstandard(m2), pch = 16, col = "blue", xlab ="Fitted Values", ylab = "Standardized Residuals")
dev.off()
#####################################################################################################
if(file.exists("Images/lnorm.pdf"))
unlink("Images/lnorm.pdf")
pdf("Images/lnorm.pdf", height = 2.5, width = 4)
x <- runif(100, 0, 2)
y <- exp(x + rnorm(100, sd = 0.25))
par(mar = c(4, 4, 0.5, 0.5))
plot(x, y, pch = 16, col = "blue", xlab ="x", ylab = "Y")
dev.off()
#####################################################################################################
if(file.exists("Images/lnormres.pdf"))
unlink("Images/lnormres.pdf")
pdf("Images/lnormres.pdf", height = 2.5, width = 4)
m4 <- lm(y ~ x)
par(mar = c(4, 4, 0.5, 0.5))
plot(fitted(m4), rstandard(m4), pch = 16, col = "blue", xlab ="Fitted Values", ylab = "Standardized Residuals")
abline(h = 0, col = "gray")
dev.off()
#####################################################################################################
if(file.exists("Images/tlnormres.pdf"))
unlink("Images/tlnormres.pdf")
pdf("Images/tlnormres.pdf", height = 2.5, width = 4)
m5 <- lm(log(y) ~ x)
par(mar = c(4, 4, 0.5, 0.5))
plot(fitted(m5), rstandard(m5), pch = 16, col = "blue", xlab ="Fitted Values",
ylab = "Standardized Residuals")
abline(h = 0, col = "gray")
dev.off()
#####################################################################################################
if(file.exists("Images/citiqq.pdf"))
unlink("Images/citiqq.pdf")
pdf("Images/citiqq.pdf", height = 4, width = 4)
par(mar = c(4, 4, 0.5, 0.5))
qqnorm(rstandard(m.citi), main = "", pch = 16, col = "blue")
qqline(rstandard(m.citi))
dev.off()
#####################################################################################################
if(file.exists("Images/lognormqq.pdf"))
unlink("Images/lognormqq.pdf")
pdf("Images/lognormqq.pdf", height = 4, width = 4)
lnsamp <- rlnorm(250, sdlog = 0.5)
par(mar = c(4, 4, 0.5, 0.5))
qqnorm(lnsamp, main = "", pch = 16, col = "blue")
qqline(lnsamp)
dev.off()
#####################################################################################################
if(file.exists("Images/tqq.pdf"))
unlink("Images/tqq.pdf")
pdf("Images/tqq.pdf", height = 4, width = 4)
tsamp <- rt(250, 3)
par(mar = c(4, 4, 0.5, 0.5))
qqnorm(tsamp, main = "", pch = 16, col = "blue")
qqline(tsamp)
dev.off()
#####################################################################################################
if(file.exists("Images/citiacf.pdf"))
unlink("Images/citiacf.pdf")
pdf("Images/citiacf.pdf", height = 4, width = 4)
par(mar = c(4, 4, 0.5, 0.5))
acf(rstandard(m.citi), main = "")
dev.off()
#####################################################################################################
if(file.exists("Images/corracf.pdf"))
unlink("Images/corracf.pdf")
pdf("Images/corracf.pdf", height = 4, width = 4)
par(mar = c(4, 4, 0.5, 0.5))
acf(rstandard(m7), main = "")
dev.off()
#####################################################################################################
if(file.exists("Images/extlev.pdf"))
unlink("Images/extlev.pdf")
pdf("Images/extlev.pdf", height = 4, width = 6)
par(mar = c(4, 4, 0.5, 0.5))
x <- seq(-1, 1, length = 9)
y <- c(2*x + rnorm(9)/10, rnorm(1))
x <- c(x, 5)
plot(x, y, pch = 16, ylim = c(-3, 3), col = "blue", xlab = "x", ylab = "Y")
abline(lm(y ~ x))
dev.off()
#####################################################################################################
library(robust)
if(file.exists("Images/qqwenv.pdf"))
unlink("Images/qqwenv.pdf")
pdf("Images/qqwenv.pdf", height = 4.5, width = 4.5)
fm <- fit.models(m.citi)
names(fm) <- "Citigroup vs. S&P 500 (Daily Returns)"
plot(fm, which = 2)
dev.off()
library(quantmod)
getSymbols("CITCRP")
getSymbols("CONED")
getSymbols("CONTIL")
getSymbols("DATGEN")
getSymbols("DEC")
getSymbols("^GSPC")
symbols <- c("LNKD","GOOG","Z","AMZN","ZNGA")
CITCRP <- CITCRP["2012"]
CONED <- CONED["2012"]
CONTIL <- CONTIL["2012"]
DATGEN <- DATGEN["2012"]
DEC <- DEC["2012"]
GSPC <- GSPC["2012"]
N <- 185
symb_mat <- cbind(as.vector(CITCRP[1:N,4]),
as.vector(CONED[1:N,4]),
as.vector(CONTIL[1:N,4]),
as.vector(DATGEN[1:N,4]),
as.vector(DEC[1:N,4]))
C.GSPC <- as.vector(GSPC[1:N, 4])
R.SP500 <- log(C.GSPC[-1] / C.GSPC[-N])
returns <- log(symb_mat[-1,]/symb_mat[-N,])
m1 <- lm(returns ~ R.SP500)
m1.sum <- summary(m1)
b <- t(coef(m1)[2, , drop = FALSE])
d <- sapply(m1.sum, function(u) u$sigma)
D <- diag(d^2)
sigma2M <- var(R.SP500)
omega <- sigma2M * b %*% t(b) + D
var(returns)
RETURNS
returns
omega
rm(list=ls(all=TRUE))
library(quantmod)
getSymbols("ZNGA")
getSymbols("AMZN")
getSymbols("Z")
getSymbols("GOOG")
getSymbols("LNKD")
getSymbols("^GSPC")
symbols <- c("LNKD","GOOG","Z","AMZN","ZNGA")
ZNGA <- ZNGA["2012"]
AMZN <- AMZN["2012"]
Z <- Z["2012"]
GOOG <- GOOG["2012"]
LNKD <- LNKD["2012"]
GSPC <- GSPC["2012"]
N <- 185
symb_mat <- cbind(as.vector(Z[1:N,4]),
as.vector(AMZN[1:N,4]),
as.vector(ZNGA[1:N,4]),
as.vector(GOOG[1:N,4]),
as.vector(LNKD[1:N,4]))
C.GSPC <- as.vector(GSPC[1:N, 4])
R.SP500 <- log(C.GSPC[-1] / C.GSPC[-N])
returns <- log(symb_mat[-1,]/symb_mat[-N,])
m1 <- lm(returns ~ R.SP500)
m1.sum <- summary(m1)
b <- t(coef(m1)[2, , drop = FALSE])
d <- sapply(m1.sum, function(u) u$sigma)
D <- diag(d^2)
sigma2M <- var(R.SP500)
omega <- sigma2M * b %*% t(b) + D
var(returns)
omega
setwd("~/Clustering-Algorithms/src/main/Python")
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
clusters
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
head(clusters)
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
head(clusters)
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
p
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
source('~/Clustering-Algorithms/src/main/Python/cluster_plot.R')
